name: Build

permissions:
  contents: read
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      name:
        type: string
        description: The name of the environment to create
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
  push:
    branches:
      - main
      - acme

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20.17.0"
  # Environment name:
  # 1. If event is push AND branch is main → returns staging
  # 2. If event is push AND any other branch → returns the branch name (github.ref_name)
  # 3. If event is pull_request → returns pr-XXX (where XXX is PR number)
  # 4. For any other event → returns the workflow dispatch input name
  ENV_NAME: ${{ github.event_name == 'push' && github.ref_name == 'main' && 'staging' || github.event_name == 'push' && github.ref_name || github.event_name == 'pull_request' && format('pr-{0}', github.event.pull_request.number) || github.event.inputs.name }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      kblocks-host: ${{ steps.qkube.outputs.kblocks-host }}
      qkube-name: ${{ steps.qkube.outputs.qkube-name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Unlock secrets
        uses: sliteteam/github-action-git-crypt-unlock@1.2.0
        env:
          GIT_CRYPT_KEY: ${{ secrets.GIT_CRYPT_KEY }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      - name: Cache + Restore node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache
            node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Dependencies
        run: |
          npm install

      - name: Install helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Install Skaffold
        run: |
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64
          chmod +x skaffold
          sudo mv skaffold /usr/local/bin

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          mkdir -p /home/runner/.kube
          echo "apiVersion: v1" > /home/runner/.kube/config

      - name: Setup a new qkube
        id: qkube
        run: |
          QKUBE_NAME="${{ env.ENV_NAME }}.quickube.sh"
          npx qkube new --size large --name ${{ env.ENV_NAME }} || true
          npx qkube use $QKUBE_NAME
          echo "Using qkube $QKUBE_NAME (${{ env.ENV_NAME }})"
          echo "qkube-name=$QKUBE_NAME" >> $GITHUB_OUTPUT
          echo "kblocks-host=${{ env.ENV_NAME }}.kblocks.io" >> $GITHUB_OUTPUT

      - name: Create DNS record
        env:
          QKUBE_NAME: ${{ steps.qkube.outputs.qkube-name }}
        run: |
          curl -H 'Authorization: Bearer ${{ secrets.DNSIMPLE_TOKEN }}' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -X POST \
            -d '{"type":"CNAME","name":"'${{ env.ENV_NAME }}'","content":"'$QKUBE_NAME'","ttl":3600}' \
            https://api.dnsimple.com/v2/${{ secrets.DNSIMPLE_ACCOUNT }}/zones/kblocks.io/records --verbose

      - name: Install gallery secrets
        run: |
          export KBLOCKS_SYSTEM_ID="${{ steps.qkube.outputs.kblocks-host }}"
          ./scripts/install-kblocks-secrets.sh ./secrets/kblocks-gallery.env ./secrets/kblocks-cluster.env

      - name: Install portal secrets
        env:
          QKUBE_NAME: ${{ steps.qkube.outputs.qkube-name }}
          KBLOCKS_HOST: ${{ steps.qkube.outputs.kblocks-host }}
        run: |
          cp ./secrets/portal.env .portal.env
          sed -i '/WEBSITE_ORIGIN/d' .portal.env
          echo "WEBSITE_ORIGIN=https://${KBLOCKS_HOST}" >> .portal.env
          echo "KBLOCKS_STORAGE_PREFIX=${{ env.ENV_NAME }}" >> .portal.env
          echo "NON_PRIMARY_ENVIRONMENT=true" >> .portal.env
          ./scripts/install-portal-secrets.sh .portal.env

      - name: Install cert
        run: |
          ./scripts/install-cert.sh ./secrets/STAR_kblocks_io.key ./secrets/STAR_kblocks_io.pem

      - name: Install the blocks needed for the portal
        working-directory: gallery
        env:
          KBLOCKS_STORAGE_PREFIX: ${{ env.ENV_NAME }}
        run: |
          ./install-blocks.sh ./kblocks/workload
          ./install-blocks.sh ./kblocks/project
          ./install-blocks.sh ./kblocks/organization

      - name: Build packages
        run: npm run build

      - name: Build and push backend
        uses: docker/build-push-action@v6
        with:
          context: "."
          push: ${{ github.event_name == 'push' }}
          platforms: linux/arm64
          tags: wingcloudbot/kblocks-backend:latest
          cache-from: type=registry,ref=wingcloudbot/kblocks-backend:latest
          cache-to: type=inline
          build-args: |
            ENV=prod

      - name: Build and push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./apps/web
          push: ${{ github.event_name == 'push' }}
          platforms: linux/arm64
          tags: wingcloudbot/kblocks-frontend:latest
          cache-from: type=registry,ref=wingcloudbot/kblocks-frontend:latest
          cache-to: type=inline
          build-args: |
            ENV=prod

      - name: Build and push helm chart
        if: github.event_name == 'push'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: ./scripts/helm-publish.sh ./deploy

      - name: Push Supabase database changes
        if: env.ENV_NAME == 'staging'
        run: npx dotenv -e ../../secrets/portal.env -- tsx scripts/supabase-push.mts
        working-directory: apps/server

      - name: Skaffold run
        id: run
        run: |
          export VITE_BACKEND_URL="https://${{ steps.qkube.outputs.kblocks-host }}"
          export VITE_WS_URL="wss://${{ steps.qkube.outputs.kblocks-host }}/api/events"
          export VITE_SKIP_AUTH=true
          export PORTAL_INGRESS_HOST="${{ steps.qkube.outputs.kblocks-host }}"
          export PORTAL_REDIS_ENABLED=false
          export PORTAL_LOCAL_CLUSTER_NAME="${{ steps.qkube.outputs.kblocks-host }}"
          # TODO: Remove this step
          npm run build
          skaffold run --platform=linux/arm64

      - name: Post PR comment
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: "Environment is available at https://${{ steps.qkube.outputs.kblocks-host }} :rocket:"
          comment-tag: Environment

  deploy-block:
    name: "Deploy Block"
    runs-on: ubuntu-latest
    needs:
      - build
    strategy:
      matrix:
        block:
          - api-docs
          - autobuild
          - autobuild-static-site
          - aws-account
          - background-worker
          - bucket
          - cloudfront
          - cron-job
          - networked-workload
          - postgres
          - private-service
          - queue
          - quickube
          - redis
          - static-site
          - topic
          - github-workflow
          - argo-app
          - web-service
          - project
          - organization
          - workload
          - pulumi-bucket
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Unlock secrets
        uses: sliteteam/github-action-git-crypt-unlock@1.2.0
        env:
          GIT_CRYPT_KEY: ${{ secrets.GIT_CRYPT_KEY }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      - name: Cache + Restore node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache
            node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Install Dependencies
        run: npm install

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          mkdir -p /home/runner/.kube
          echo "apiVersion: v1" > /home/runner/.kube/config

      - name: Switch clusters
        run: |
          npx qkube use ${{ needs.build.outputs.qkube-name }}

      - name: Install gallery blocks
        working-directory: gallery
        env:
          KBLOCKS_STORAGE_PREFIX: ${{ env.ENV_NAME }}
        run: ./install-blocks.sh ./kblocks/${{ matrix.block }}
